%%%%%%%%%%%%%%参数初始化start%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SNR_dB = -20:2:40;        % 信噪比范围
err_array = zeros(length(SNR_dB),1);
number_of_bits_per_frame = 32300;
ldpc_decode_data_tmp =[];
ofdmDataOuttmp = [];
ofdmDmrsOutTmp = [];
tx_signal_tmp = [];
pilot_bit_tmp = [];

%%%%%%%%%%%%%%%参数初始化end%%%%%%%%%%%%%%%%%%%%%


System_initialize
for k = 1:1%length(SNR_dB)
    SNR = SNR_dB(k);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%发送 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%发送bit 生成%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    raw_data = logical(randi([0 1], number_of_bits_per_frame, 1)); %% Generating random data bits

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%CRC+ldpc+mode%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    crc_coded_data = step(crc_24_generator, raw_data); %% Adding CRC bits for error checking
    ldpc_extra_bits = ldpc_num_bits - length(crc_coded_data);
    ldpc_data = [crc_coded_data; randi([0 1], ldpc_extra_bits, 1)];
    ldpc_encoded_data = ldpc_encoder(ldpc_data);
    tx_signal_tmp = qammod(ldpc_encoded_data,M,'InputType','bit','UnitAveragePower',true);
    tx_signal = tx_signal_tmp;



    data_transfer_per_slot = data_subcarrier_num_per_sym*Nsym-length(pilot_subcarrier_indices)*pilot_sym_num;
    
    slot_num_need_to_trans = ceil(length(tx_signal)/data_transfer_per_slot);
    tx_signal = [tx_signal; complex(zeros(data_transfer_per_slot * slot_num_need_to_trans - length(tx_signal), 1))];
    
    for turn = 1:slot_num_need_to_trans
        reshaped_modulated_data = reshape(tx_signal((((turn - 1) * data_transfer_per_slot) + 1):(turn * data_transfer_per_slot), 1), ...
        data_transfer_per_slot, Nsym, number_of_transmit_antenna);
        [pilot_signal,pilot_bit] = Pilot_Generator(guard_band,pilot_subcarrier_indices,pilot_sym_num,FFTLength,number_of_transmit_antenna);
        pilot_bit_tmp = [pilot_bit_tmp;pilot_bit];
        %%%%%%%%%%%%%%%%%OFDM 调制解调%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        ofdmData = step(ofdmMod, reshaped_modulated_data,pilot_signal);

        [ofdmDataOut,ofdmDmrsOut] = step(ofdmDemod, ofdmData);
        ofdmDataOuttmp = [ofdmDataOuttmp;ofdmDataOut(:)];
        ofdmDmrsOutTmp = [ofdmDmrsOutTmp;ofdmDmrsOut(:)];

    end

        %datasend_bit = qamdemod(ofdmDmrsOutTmp, M,'OutputType','bit','UnitAveragePower',true);

        %%%%%%%%%%%%%%%%%%%%OFDM 调制解调%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        demoudebit = qamdemod(ofdmDataOuttmp(1:length(tx_signal_tmp)), M,'OutputType','bit','UnitAveragePower',true);
        demodpilot = qamdemod(ofdmDmrsOutTmp, 4,'OutputType','bit','UnitAveragePower',true);
        isequal(ldpc_encoded_data,demoudebit)
        isequal(demodpilot,pilot_bit_tmp)

  
        demoudellr = qamdemod(ofdmDataOuttmp(1:length(tx_signal_tmp)), M,'OutputType','llr','UnitAveragePower',true);
    %%%%%%%%%%%%%%%%%%%%%%%%%信道%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % tx_signal = awgn_channel(tx_signal,Noise_Var(SNR));
    %%%%%%%%%%%%%%%%%%%%%%%%%信道%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%接收%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
    
    ldpc_decoded_data = ldpc_decoder(demoudellr); %% Decoding the data bits using convolutional decoder
    ldpc_useful_data = ldpc_decoded_data(1:length(crc_coded_data), 1); %% Filtering the decoded data bits
    isequal(ldpc_decoded_data,ldpc_data)
    [crc_decoded_data, frame_error] = step(crc_24_detector, ldpc_useful_data); %% Detecting frame error using CRC detector

    if frame_error == 1
        disp("error")
    end
    
    isequal(crc_decoded_data,raw_data)
    [num, err] = biterr(crc_decoded_data,raw_data)  ;
    err_array(k) = err;
end

%semilogy(SNR_dB,err_array)
  

